var search_data = {"index":{"searchIndex":["expectation","assertions","test","unit","testcase","disable()","enable()","expect()","expect!()","expect!()","inexpect!()","last_error()","last_error=()","met_expectations?()","timeout()","timeout=()","verify!()","readme"],"longSearchIndex":["expectation","expectation::assertions","test","test::unit","test::unit::testcase","expectation::disable()","expectation::enable()","expectation#expect()","expectation#expect!()","expectation::assertions#expect!()","expectation::assertions#inexpect!()","expectation::last_error()","expectation::last_error=()","expectation::met_expectations?()","expectation::timeout()","expectation::timeout=()","expectation::verify!()",""],"info":[["Expectation","","Expectation.html","","<p>The Expectation module implements methods to verify one or more values\nagainst  set of expectations. …\n"],["Expectation::Assertions","","Expectation/Assertions.html","","<p>The Expectation::Assertions module provides expect! and inexpect!\nassertions to use from within test …\n"],["Test","","Test.html","",""],["Test::Unit","","Test/Unit.html","",""],["Test::Unit::TestCase","","Test/Unit/TestCase.html","",""],["disable","Expectation","Expectation.html#method-c-disable","()","<p>Disable the Expectation#expect method.\n"],["enable","Expectation","Expectation.html#method-c-enable","()","<p>Enable the Expectation#expect method.\n"],["expect","Expectation","Expectation.html#method-i-expect","(*expectations, &block)","<p>Verifies a number of expectations. If one or more expectations are  not met\nit raises an ArgumentError …\n"],["expect!","Expectation","Expectation.html#method-i-expect-21","(*expectations, &block)",""],["expect!","Expectation::Assertions","Expectation/Assertions.html#method-i-expect-21","(*expectation, &block)","<p>verifies the passed in expectations\n"],["inexpect!","Expectation::Assertions","Expectation/Assertions.html#method-i-inexpect-21","(*expectation, &block)","<p>verifies the failure of the passed in expectations\n"],["last_error","Expectation","Expectation.html#method-c-last_error","()",""],["last_error=","Expectation","Expectation.html#method-c-last_error-3D","(error)",""],["met_expectations?","Expectation","Expectation.html#method-c-met_expectations-3F","(*expectations, &block)","<p>Verifies a number of expectations. Raises an ArgumentError if one or more\nexpectations are not met.\n<p>In …\n"],["timeout","Expectation","Expectation.html#method-c-timeout","()",""],["timeout=","Expectation","Expectation.html#method-c-timeout-3D","(timeout)",""],["verify!","Expectation","Expectation.html#method-c-verify-21","(value, expectation)","<p>Verifies a value against an expectation; returns true if ok,  false if the\nexpectation was not met.  …\n"],["README","","README_md.html","","<p>Expect\n<p>Installation\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">gem</span> <span class=\"ruby-identifier\">install</span> <span class=\"ruby-identifier\">expectations</span>\n</pre>\n"]]}}